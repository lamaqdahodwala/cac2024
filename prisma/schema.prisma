// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Course {
  id      Int      @id @default(autoincrement())
  lessons Lesson[]
  title   String
  writer User @relation(fields: [writerId], references: [id])
  writerId String
  activeFor User[]@relation("ActiveCourses")

}

model Lesson {
  id         Int         @id @default(autoincrement())
  paragraphs Paragraph[]
  inCourse   Course      @relation(fields: [courseId], references: [id])
  courseId   Int
  title      String
  completedBy User[]
}

model Paragraph {
  id          Int    @id @default(autoincrement())
  lesson      Lesson @relation(fields: [lessonId], references: [id])
  textContent String
  lessonId    Int
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  lessonsCompleted Lesson[]
  written Course[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  activeCourses Course[] @relation("ActiveCourses")
}
 
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}
