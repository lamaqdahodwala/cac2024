// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Course {
  id        Int      @id @default(autoincrement())
  lessons   Lesson[]
  title     String
  writer    User     @relation(fields: [writerId], references: [id])
  writerId  String
  activeFor User[]   @relation("ActiveCourses")
  description String @default("")
}

model Lesson {
  id            Int    @id @default(autoincrement())
  textContent   String
  inCourse      Course @relation(fields: [courseId], references: [id])
  courseId      Int
  title         String
  completedBy   User[]
  quiz          Quiz?
  description String @default("")
  exercises Exercise[]
}

model Exercise { 
  id          Int       @id @default(autoincrement())
  content     String
  lesson      Lesson    @relation(fields: [lessonId], references: [id])
  lessonId    Int
  instructions     Instruction[]
  dataset          Dataset?
  passRequirements PassRequirement[]
  submissions      UserExerciseSubmission[]
}

model Instruction {
  id        Int       @id @default(autoincrement())
  content   String
  exercise  Exercise  @relation(fields: [exerciseId], references: [id])
  exerciseId Int  @unique
}

model Dataset {
  id        Int       @id @default(autoincrement())
  name      String
  path      String
  exercise  Exercise  @relation(fields: [exerciseId], references: [id])
  exerciseId Int @unique
}

model PassRequirement {
  id        Int       @id @default(autoincrement())
  criteria  String
  exercise  Exercise  @relation(fields: [exerciseId], references: [id])
  exerciseId Int @unique
}

model Quiz {
  id         Int           @id @default(autoincrement())
  lesson     Lesson        @relation(fields: [lessonId], references: [id])
  lessonId   Int           @unique
  questions  QuizQuestion[]
}

model QuizQuestion {
  id                         Int         @id @default(autoincrement())
  quiz                       Quiz        @relation(fields: [quizId], references: [id])
  quizId                     Int
  question                   String
  incorrectAnswerExplanation String?
  answers                    QuizAnswer[]
}

model QuizAnswer {
  id             Int          @id @default(autoincrement())
  quizQuestion   QuizQuestion @relation(fields: [quizQuestionId], references: [id])
  quizQuestionId Int
  answerText     String
  isCorrect      Boolean
}

model User {
  id               String    @id @default(cuid())
  name             String?
  email            String?   @unique
  emailVerified    DateTime?
  image            String?
  accounts         Account[]
  sessions         Session[]
  lessonsCompleted Lesson[]
  written          Course[]
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  activeCourses    Course[]  @relation("ActiveCourses")
  role             String    @default("user")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model UserExerciseSubmission {
  id         Int         @id @default(autoincrement())
  exercise   Exercise    @relation(fields: [exerciseId], references: [id])
  exerciseId Int
  blocks     Block[]
}

model Block {
  id         Int       @id @default(autoincrement())
  content    String
  submission UserExerciseSubmission @relation(fields: [submissionId], references: [id])
  submissionId Int
}